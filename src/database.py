import requests, asyncio, schedule
from datetime import datetime
from collections import Counter
from course import get_course_id as course
from errorHandler import errorHandler as error
from keybutton import Keybutton


class Database:
    def __init__(self, bot):
        self.bot = bot;
        self.keybutton = Keybutton(self.bot)
        self.user = "http://vivers0.pythonanywhere.com/api/user/"
        # self.timetable = "http://vivers0.pythonanywhere.com/api/timetable/"
        self.timetable = "http://localhost:8000/api/timetable/"
        # Time
        self.eval = ['–ß–µ—Ç–Ω–∞—è', '–ù–µ—á–µ—Ç–Ω–∞—è']
        self.week = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥—É', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü—É', '–°—É–±–±–æ—Ç—É', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

    def registration(self, message):
        def check_user_in_db(user_id):
            try:
                r = requests.get(self.user+str(user_id))
            except requests.RequestException:
                pass 
            return True if r.status_code == 404 else False

        user_id = message.from_user.id
        if check_user_in_db(user_id) == False:
            try:
                r = requests.post(self.user, json={"user": {"user_id": user_id, "course_id": 0, "notify": False }}, headers={"Content-Type": "application/json"})
            except requests.RequestException:
                pass 
            if r.status_code == 200:
                self.bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏, –Ω–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã —É—á–∏—à—å—Å—è üòú')
                self.bot.register_next_step_handler(message, self.set_course)
            else:
                error(self.bot, message, 'except')
        else:
            self.bot.reply_to(message, '–¢—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üòä')

    def set_course(self, message):
        user_id = message.from_user.id
        course_id = course(message.text)
        if course_id == 0:
            msg = self.bot.send_message(user_id, '–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ üôÅ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:)')
            self.bot.register_next_step_handler(msg, self.set_course)
        else:
            try:
                r = requests.put(self.user+str(user_id), json={"course_id": course_id}, headers={"Content-Type": "application/json"})
            except requests.RequestException:
                pass
            if r.status_code == 200:
                self.bot.send_message(user_id, '–û—Ç–ª–∏—á–Ω–æ! –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7 —É—Ç—Ä–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /notify –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:)')
                self.keybutton.send_menu(message)
            else:
                self.bot.send_message(user_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è - /reset')
        
    def notify(self, message):
        user_id = message.from_user.id
        try:
            r = requests.get(self.user+str(user_id), headers={"Content-Type": "application/json"})
        except requests.RequestException:
            pass
        if r.status_code == 200:
            if r.json()['user']['notify'] == False:
                try:
                    res = requests.put(self.user+str(user_id), json={ 'notify': True }, headers={ "Content-Type": "application/json" })
                except requests.RequestException:
                    pass
                if res.status_code == 200:
                    self.bot.send_message(user_id, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: *–í–∫–ª—é—á–µ–Ω–æ*')
            else:
                try:
                    res = requests.put(self.user+str(user_id), json={ 'notify': False }, headers={"Content-Type": "application/json"})
                except requests.RequestException:
                    pass
                if res.status_code == 200:
                    self.bot.send_message(user_id, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: *–í—ã–∫–ª—é—á–µ–Ω–æ*')
        else:
            self.bot.send_message(user_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è - /reset')

    def reset(self, message):
        user_id = message.from_user.id
        try:
            r = requests.delete(self.user+str(user_id))
        except requests.RequestException:
            pass
        if r.status_code == 200:
            self.bot.send_message(user_id, '–Ø —É–¥–∞–ª–∏–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ. –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è - /start')
        else:
            self.bot.send_message(user_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è - /reset')

    # Method

    def get_user_course(self, message):
        r = requests.get(self.user+str(message.from_user.id))
        if r.status_code == 200:
            return r.json()['user']['course_id']
    # Responce

    def get(self, type—É):
        try:
            return requests.get(type—É).json()
        except requests.RequestException:
            print("Database: RequestException")

        