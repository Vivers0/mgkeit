import requests
from course import get_course_id as course
from errorHandler import errorHandler as error
class DB:
    def __init__(self, bot):
        self.bot = bot
        self.user = "http://vivers0.pythonanywhere.com/api/user/"
        self.timetable = "http://vivers0.pythonanywhere.com/api/timetable/"

    # def today_timetable(self, message):
    #     for i in self.timetable['timetable']:
    #         if i['course_id'] == 31:
    #             self.bot.reply_to(message, i['timetable'])

    def registration(self, message):
        def check_user_in_db(user_id):
            r = requests.get(self.user+str(user_id))
            return True if r.status_code == 404 else False

        user_id = message.from_user.id
        if check_user_in_db(user_id) == False:
            r = requests.post(self.user, json={"user": {"user_id": user_id, "course_id": 0, "notify": False }}, headers={"Content-Type": "application/json"})
            if r.status_code == 200:
                self.bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏, –Ω–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã —É—á–∏—à—å—Å—è üòú')
                self.bot.register_next_step_handler(message, self.set_course)
            else:
                error(self.bot, message, 'except')
        else:
            self.bot.reply_to(message, '–¢—ã —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üòä')

    def set_course(self, message):
        user_id = message.from_user.id
        course_id = course(message.text)
        if course_id == 0:
            msg = self.bot.send_message(user_id, '–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ üôÅ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:)')
            self.bot.register_next_step_handler(msg, self.set_course)
        else:
            r = requests.put(self.user+str(user_id), json={"course_id": course_id}, headers={"Content-Type": "application/json"})
            if r.status_code == 200:
                self.bot.send_message(user_id, '–û—Ç–ª–∏—á–Ω–æ! –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7 —É—Ç—Ä–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /notify –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç:)')
            else:
                print('61 str')

    def reset(self, message):
        user_id = message.from_user.id
        r = requests.delete(self.user+str(user_id))
        if r.status_code == 200:
            self.bot.send_message(user_id, '–Ø —É–¥–∞–ª–∏–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ. –¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–Ω–æ–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è - /start')
        else:
            error(self.bot, message, 'except')

    def notify(self, message):
        user_id = message.from_user.id
        r = requests.get(self.user+str(user_id), headers={"Content-Type": "application/json"})
        if r.status_code == 200:
            if r.json()['user']['notify'] == False:
                res = requests.put(self.user+str(user_id), json={ 'notify': True }, headers={ "Content-Type": "application/json" })
                if res.status_code == 200:
                    self.bot.send_message(user_id, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: *–í–∫–ª—é—á–µ–Ω–æ*')
            else:
                res = requests.put(self.user+str(user_id), json={ 'notify': False }, headers={"Content-Type": "application/json"})
                if res.status_code == 200:
                    self.bot.send_message(user_id, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: *–í—ã–∫–ª—é—á–µ–Ω–æ*')
        else:
            error(self.bot, message, 'except')